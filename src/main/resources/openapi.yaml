---
swagger: '2.0'
info:
  description: 'This is a sample server User server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For
    this sample, you can use the api key `special-key` to test the authorization filters.'
  version: 1.0.5
  title: Swagger User
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: 192.168.101.1:8080
basePath: "/v2"
tags:
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
schemes:
- https
- http
paths:
  "/users/createWithArray":
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      consumes:
      - application/json
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/User"
      responses:
        default:
          description: successful operation
  "/users/createWithList":
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      consumes:
      - application/json
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/User"
      responses:
        default:
          description: successful operation
  "/users/{username}":
    get:
      tags:
      - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  "/users":
    get:
      tags:
      - user
      summary: List all users
      description: ''
      operationId: getAllUsers
      produces:
      - application/json
      - application/xml
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
  "/users":
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      consumes:
      - application/json
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        default:
          description: successful operation
definitions:
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
